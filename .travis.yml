sudo: required

services:
  - docker

language: bash

env:
  global:
    - IMAGE_NAME=biarms/wordpress
    - OFFICIAL_IMAGE_NAME=wordpress
    - VERSION=5.4.0b

# From https://docs.travis-ci.com/user/customizing-the-build/
# install: true

before_install:
  - BUILD_DATE=$(date -u +"%Y-%m-%dT%H-%M-%SZ")
  - BUILD_NUMBER=${TRAVIS_BUILD_NUMBER}
  - >
    if [[ "${TRAVIS_BRANCH}" == "master" && "$TRAVIS_PULL_REQUEST" == "false" ]]; then
      echo "We are building the master branch: version is official version."
      IMAGE_VERSION="${VERSION}"
      BETA_MODE="false"
    else
      echo "We are not building the master branch (or we are in a PR mode). Building a beta version then"
      IMAGE_VERSION="${VERSION}-beta-${BUILD_NUMBER}"
      BETA_MODE="true"
    fi
  - echo "IMAGE_VERSION=${IMAGE_VERSION} - TRAVIS_BRANCH=${TRAVIS_BRANCH} - DOCKER_USERNAME=${DOCKER_USERNAME}"
  - docker login -u="${DOCKER_USERNAME}" -p="${DOCKER_PASSWORD}"
  - docker version
  - docker run --rm --privileged multiarch/qemu-user-static:register --reset
  # get qemu-arm-static binary
  - mkdir tmp
  - pushd tmp
  - curl -L -o qemu-aarch64-static.tar.gz https://github.com/multiarch/qemu-user-static/releases/download/v2.12.0-1/x86_64_qemu-aarch64-static.tar.gz
  - tar xzf qemu-aarch64-static.tar.gz
  - curl -L -o qemu-arm-static.tar.gz https://github.com/multiarch/qemu-user-static/releases/download/v2.12.0-1/x86_64_qemu-arm-static.tar.gz
  - tar xzf qemu-arm-static.tar.gz
  - popd
  # When https://github.com/docker/cli/pull/138 merged branch will be part of an official release:
  # docker manifest create $IMAGE_NAME $IMAGE_NAME-arm
  # docker manifest annotate $IMAGE_NAME $IMAGE_NAME-arm --os linux --arch arm
  # docker manifest push new-list-ref-name
  #
  # In the mean time, we use: https://github.com/estesp/manifest-tool
  # https://github.com/estesp/manifest-tool/releases/download/v0.7.0/manifest-tool-linux-arm64 &&
  - curl -L -o manifest-tool https://github.com/estesp/manifest-tool/releases/download/v0.8.0/manifest-tool-linux-386
  - chmod +x manifest-tool
  - ls -l manifest-tool
  - bash -c './manifest-tool --version'

script:
  - >
    echo "image: ${IMAGE_NAME}:${IMAGE_VERSION}" > manifest.yaml
  - >
    echo "manifests:" >> manifest.yaml
  - >
    echo "  - image: ${IMAGE_NAME}:linux-amd64-${IMAGE_VERSION} " >> manifest.yaml
  - >
    echo "    platform: " >> manifest.yaml
  - >
    echo "      os: linux " >> manifest.yaml
  - >
    echo "      architecture: amd64 " >> manifest.yaml
  - >
    echo "  - image: ${IMAGE_NAME}:linux-arm32v5-${IMAGE_VERSION} " >> manifest.yaml
  - >
    echo "    platform: " >> manifest.yaml
  - >
    echo "      os: linux " >> manifest.yaml
  - >
    echo "      architecture: arm " >> manifest.yaml
  - >
    echo "      variant: v5 " >> manifest.yaml
  - >
    echo "  - image: ${IMAGE_NAME}:linux-arm32v7-${IMAGE_VERSION} " >> manifest.yaml
  - >
    echo "    platform: " >> manifest.yaml
  - >
    echo "      os: linux " >> manifest.yaml
  - >
    echo "      architecture: arm " >> manifest.yaml
  - >
    echo "      variant: v7 " >> manifest.yaml
  - >
    echo "  - image: ${IMAGE_NAME}:linux-arm64v8-${IMAGE_VERSION} " >> manifest.yaml
  - >
    echo "    platform: " >> manifest.yaml
  - >
    echo "      os: linux " >> manifest.yaml
  - >
    echo "      architecture: arm64 " >> manifest.yaml
  - >
    echo "      variant: v8 " >> manifest.yaml
  - cat manifest.yaml
  - VCS_REF=$(git rev-parse --short HEAD)
  - docker pull ${OFFICIAL_IMAGE_NAME}:${VERSION}
  - docker build --build-arg VCS_REF=$VCS_REF --build-arg BUILD_DATE=${BUILD_DATE} --build-arg VERSION="${VERSION}" --build-arg BUILD_ARCH="arm32v5/" --build-arg QEMU_ARCH="arm" -t ${IMAGE_NAME}:build-arm32v5 .
  - docker build --build-arg VCS_REF=$VCS_REF --build-arg BUILD_DATE=${BUILD_DATE} --build-arg VERSION="${VERSION}" --build-arg BUILD_ARCH="arm32v7/" --build-arg QEMU_ARCH="arm" -t ${IMAGE_NAME}:build-arm32v7 .
  - docker build --build-arg VCS_REF=$VCS_REF --build-arg BUILD_DATE=${BUILD_DATE} --build-arg VERSION="${VERSION}" --build-arg BUILD_ARCH="arm64v8/" --build-arg QEMU_ARCH="aarch64" -t ${IMAGE_NAME}:build-arm64v8 .

after_success:
  - docker login -u="${DOCKER_USERNAME}" -p="${DOCKER_PASSWORD}"
  - docker tag ${IMAGE_NAME}:build-arm32v5 ${IMAGE_NAME}:linux-arm32v5-${IMAGE_VERSION}
  - docker push ${IMAGE_NAME}:linux-arm32v5-${IMAGE_VERSION}
  - docker tag ${IMAGE_NAME}:build-arm32v7 ${IMAGE_NAME}:linux-arm32v7-${IMAGE_VERSION}
  - docker push ${IMAGE_NAME}:linux-arm32v7-${IMAGE_VERSION}
  - docker tag ${IMAGE_NAME}:build-arm64v8 ${IMAGE_NAME}:linux-arm64v8-${IMAGE_VERSION}
  - docker push ${IMAGE_NAME}:linux-arm64v8-${IMAGE_VERSION}
  # Push the official image as amd64
  - docker tag ${OFFICIAL_IMAGE_NAME}:${VERSION} ${IMAGE_NAME}:linux-amd64-${IMAGE_VERSION}
  - docker push ${IMAGE_NAME}:linux-amd64-${IMAGE_VERSION}
  - bash -c './manifest-tool push from-spec manifest.yaml'
  - >
    if [[ "${BETA_MODE}" == "false" ]]; then
      echo "Building master branch. Let's also push the 'latest' tag on docker hub"
      docker tag ${IMAGE_NAME}:build ${IMAGE_NAME}:latest
      docker push ${IMAGE_NAME}:latest
    fi
